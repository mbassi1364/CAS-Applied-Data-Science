
## R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
## Copyright (C) 2018 The R Foundation for Statistical Computing
## Platform: x86_64-w64-mingw32/x64 (64-bit)

## R ist freie Software und kommt OHNE JEGLICHE GARANTIE.
## Sie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.
## Tippen Sie 'license()' or 'licence()' für Details dazu.

## R ist ein Gemeinschaftsprojekt mit vielen Beitragenden.
## Tippen Sie 'contributors()' für mehr Information und 'citation()',
## um zu erfahren, wie R oder R packages in Publikationen zitiert werden können.

## Tippen Sie 'demo()' für einige Demos, 'help()' für on-line Hilfe, oder
## 'help.start()' für eine HTML Browserschnittstelle zur Hilfe.
## Tippen Sie 'q()', um R zu verlassen.

setwd(paste('C:/data/CAS-ADS/Git.repos/CAS-Applied-Data-Science/Machine-Learning-Project/project.1/metriken.2020-03-14',
            'data/prod.dba_hist_sysmetric_summary.2020-02-12-bis-2020-03-14', sep='/'))
daten <- read.csv2(file="sysmetrics-summary.dsv", sep=";", dec=".", stringsAsFactors=F)
str(daten)
## 'data.frame':   223570 obs. of  12 variables:
##  $ ï..SNAP_ID        : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ INSTANCE_NUMBER   : int  1 2 1 2 1 2 1 2 1 2 ...
##  $ BEGIN_TIME        : chr  "2020-02-12 23:59:54" "2020-02-13 00:00:18" "2020-02-12 23:59:54" "2020-02-13 00:00:18" ...
##  $ END_TIME          : chr  "2020-02-13 00:59:55" "2020-02-13 01:00:18" "2020-02-13 00:59:55" "2020-02-13 01:00:18" ...
##  $ INTSIZE           : int  359951 359919 359951 359919 359951 359919 359951 359919 359951 359919 ...
##  $ METRIC_ID         : int  2000 2000 2001 2001 2002 2002 2003 2003 2004 2004 ...
##  $ GROUP_ID          : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ NUM_INTERVAL      : int  60 60 60 60 60 60 60 60 60 60 ...
##  $ MINVAL            : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ AVERAGE           : num  98.3 99.7 100 100 100 ...
##  $ MAXVAL            : num  99.5 100 100 100 100 ...
##  $ STANDARD_DEVIATION: num  1.054559 0.251296 0 0 0.000323 ...

library(data.table)
## data.table 1.11.8  Latest news: r-datatable.com

dt <- data.table(daten)
str(dt)
## Classes ‘data.table’ and 'data.frame':  223570 obs. of  12 variables:
##  $ ï..SNAP_ID        : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ INSTANCE_NUMBER   : int  1 2 1 2 1 2 1 2 1 2 ...
##  $ BEGIN_TIME        : chr  "2020-02-12 23:59:54" "2020-02-13 00:00:18" "2020-02-12 23:59:54" "2020-02-13 00:00:18" ...
##  $ END_TIME          : chr  "2020-02-13 00:59:55" "2020-02-13 01:00:18" "2020-02-13 00:59:55" "2020-02-13 01:00:18" ...
##  $ INTSIZE           : int  359951 359919 359951 359919 359951 359919 359951 359919 359951 359919 ...
##  $ METRIC_ID         : int  2000 2000 2001 2001 2002 2002 2003 2003 2004 2004 ...
##  $ GROUP_ID          : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ NUM_INTERVAL      : int  60 60 60 60 60 60 60 60 60 60 ...
##  $ MINVAL            : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ AVERAGE           : num  98.3 99.7 100 100 100 ...
##  $ MAXVAL            : num  99.5 100 100 100 100 ...
##  $ STANDARD_DEVIATION: num  1.054559 0.251296 0 0 0.000323 ...
##  - attr(*, ".internal.selfref")=<externalptr> 

## Aus BEGIN_TIME String ein Timestamp-Objekt erzeugen 
sTimeTmp <- dt[, as.POSIXct(BEGIN_TIME, format="%Y-%m-%d %H:%M:%S")]
str(sTimeTmp)
 ## POSIXct[1:223570], format: "2020-02-12 23:59:54" "2020-02-13 00:00:18" "2020-02-12 23:59:54" "2020-02-13 00:00:18" ...
> 
sum(is.na(sTimeTmp))
## [1] 158

tmpna <- which(is.na(sTimeTmp))
## Toad exportiert von einem Oracle DATE nur den Datumsanteil, wenn der Zeitanteil 00:00:00 ist
## Umwandlung in POSIXct-Format mit vollem Datumsformat schlägt dann fehl.
 
dt[tmpna,  BEGIN_TIME := paste(BEGIN_TIME, '00:00:00', ' ')]
dt[tmpna, ]
##      ï..SNAP_ID INSTANCE_NUMBER            BEGIN_TIME            END_TIME INTSIZE METRIC_ID GROUP_ID NUM_INTERVAL MINVAL      AVERAGE       MAXVAL STANDARD_DEVIATION
##   1:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2000        2           60      0 9.801899e+01 9.938138e+01       8.893586e-01
##   2:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2001        2           60      0 1.000000e+02 1.000000e+02       0.000000e+00
##   3:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2002        2           60      0 1.000000e+02 1.000000e+02       3.623979e-05
##   4:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2003        2           60      0 2.601050e+01 4.705584e+01       7.030279e+00
##   5:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2004        2           60      0 4.329926e+03 1.019561e+04       1.785542e+03
##  ---                                                                                                                                                                 
## 154:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2155        2           60      0 4.276052e+02 7.067554e+02       5.764746e+01
## 155:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2156        2           60      0 2.604566e+09 5.326457e+09       9.895028e+08
## 156:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2157        2           60      0 6.976176e+08 7.004488e+08       5.887493e+05
## 157:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2158        2           60      0 3.090672e+09 3.244662e+09       6.804388e+07
## 158:      39888               1 2020-02-18 00:00:00   2020-02-18 01:00:01  360053      2159        2           60      0 1.762973e+07 1.387971e+08       3.718739e+07
 
sTimeTmp <- dt[, as.POSIXct(BEGIN_TIME, format="%Y-%m-%d %H:%M:%S")]
sum(is.na(sTimeTmp))
## [1] 0
 
sTime <- trunc(sTimeTmp, units="mins")
dt[, sampleTime := as.POSIXct(sTime)]
setkeyv(dt, c("sampleTime", "METRIC_ID", "GROUP_ID", "INSTANCE_NUMBER"))
str(dt)
## Classes ‘data.table’ and 'data.frame':  223570 obs. of  13 variables:
##  $ ï..SNAP_ID        : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ INSTANCE_NUMBER   : int  1 1 1 1 1 1 1 1 1 1 ...
##  $ BEGIN_TIME        : chr  "2020-02-12 23:59:54" "2020-02-12 23:59:54" "2020-02-12 23:59:54" "2020-02-12 23:59:54" ...
##  $ END_TIME          : chr  "2020-02-13 00:59:55" "2020-02-13 00:59:55" "2020-02-13 00:59:55" "2020-02-13 00:59:55" ...
##  $ INTSIZE           : int  359951 359951 359951 359951 359951 359951 359951 359951 359951 359951 ...
##  $ METRIC_ID         : int  2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 ...
##  $ GROUP_ID          : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ NUM_INTERVAL      : int  60 60 60 60 60 60 60 60 60 60 ...
##  $ MINVAL            : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ AVERAGE           : num  98.3 100 100 30 5035.7 ...
##  $ MAXVAL            : num  99.5 100 100 55.9 15728.1 ...
##  $ STANDARD_DEVIATION: num  1.05 0.00 3.23e-04 9.33 2.71e+03 ...
##  $ sampleTime        : POSIXct, format: "2020-02-12 23:59:00" "2020-02-12 23:59:00" "2020-02-12 23:59:00" "2020-02-12 23:59:00" ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "sampleTime" "METRIC_ID" "GROUP_ID" "INSTANCE_NUMBER"
 
## Spaltennamen korrigieren; hat noch BOM vom File
colnames(dt)
##  [1] "ï..SNAP_ID"    "INSTANCE_NUMBER"    "BEGIN_TIME"    "END_TIME"    "INTSIZE"    "METRIC_ID"    "GROUP_ID"    "NUM_INTERVAL"    "MINVAL"   
## [10] "AVERAGE"    "MAXVAL"    "STANDARD_DEVIATION" "sampleTime"    

dt.names <- colnames(dt)
dt.names[1] <- "SNAP_ID"
dt.names
##  [1] "SNAP_ID"    "INSTANCE_NUMBER"    "BEGIN_TIME"    "END_TIME"    "INTSIZE"    "METRIC_ID"    "GROUP_ID"    "NUM_INTERVAL"    "MINVAL"    
## [10] "AVERAGE"    "MAXVAL"    "STANDARD_DEVIATION" "sampleTime"    

colnames(dt) <- dt.names
str(dt)
## Classes ‘data.table’ and 'data.frame':  223570 obs. of  13 variables:
##  $ SNAP_ID           : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ INSTANCE_NUMBER   : int  1 1 1 1 1 1 1 1 1 1 ...
##  $ BEGIN_TIME        : chr  "2020-02-12 23:59:54" "2020-02-12 23:59:54" "2020-02-12 23:59:54" "2020-02-12 23:59:54" ...
##  $ END_TIME          : chr  "2020-02-13 00:59:55" "2020-02-13 00:59:55" "2020-02-13 00:59:55" "2020-02-13 00:59:55" ...
##  $ INTSIZE           : int  359951 359951 359951 359951 359951 359951 359951 359951 359951 359951 ...
##  $ METRIC_ID         : int  2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 ...
##  $ GROUP_ID          : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ NUM_INTERVAL      : int  60 60 60 60 60 60 60 60 60 60 ...
##  $ MINVAL            : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ AVERAGE           : num  98.3 100 100 30 5035.7 ...
##  $ MAXVAL            : num  99.5 100 100 55.9 15728.1 ...
##  $ STANDARD_DEVIATION: num  1.05 0.00 3.23e-04 9.33 2.71e+03 ...
##  $ sampleTime        : POSIXct, format: "2020-02-12 23:59:00" "2020-02-12 23:59:00" "2020-02-12 23:59:00" "2020-02-12 23:59:00" ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "sampleTime" "METRIC_ID" "GROUP_ID" "INSTANCE_NUMBER"
 
## Überprüfen, ob alle Samples vollständig sind (alle Metriken), oder nicht
daten.metrics <- read.csv2(file="metrics-meta.dsv", sep=";", dec=".", stringsAsFactors=F)
dt.metrics <- data.table(daten.metrics[, c("METRIC_ID", "GROUP_ID")])
setkeyv(dt.metrics, c("METRIC_ID", "GROUP_ID"))
str(dt.metrics)
## Classes ‘data.table’ and 'data.frame':  158 obs. of  2 variables:
##  $ METRIC_ID: int  2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 ...
##  $ GROUP_ID : int  2 2 2 2 2 2 2 2 2 2 ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "METRIC_ID" "GROUP_ID"
 
dt.test <- merge(dt, dt.metrics, by=c("METRIC_ID", "GROUP_ID"), all=T)
setkeyv(dt.test, c("sampleTime", "METRIC_ID", "GROUP_ID"))
str(dt.test)
## Classes ‘data.table’ and 'data.frame':  223570 obs. of  13 variables:
##  $ METRIC_ID         : int  2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 ...
##  $ GROUP_ID          : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ SNAP_ID           : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ INSTANCE_NUMBER   : int  1 1 1 1 1 1 1 1 1 1 ...
##  $ BEGIN_TIME        : chr  "2020-02-12 23:59:54" "2020-02-12 23:59:54" "2020-02-12 23:59:54" "2020-02-12 23:59:54" ...
##  $ END_TIME          : chr  "2020-02-13 00:59:55" "2020-02-13 00:59:55" "2020-02-13 00:59:55" "2020-02-13 00:59:55" ...
##  $ INTSIZE           : int  359951 359951 359951 359951 359951 359951 359951 359951 359951 359951 ...
##  $ NUM_INTERVAL      : int  60 60 60 60 60 60 60 60 60 60 ...
##  $ MINVAL            : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ AVERAGE           : num  98.3 100 100 30 5035.7 ...
##  $ MAXVAL            : num  99.5 100 100 55.9 15728.1 ...
##  $ STANDARD_DEVIATION: num  1.05 0.00 3.23e-04 9.33 2.71e+03 ...
##  $ sampleTime        : POSIXct, format: "2020-02-12 23:59:00" "2020-02-12 23:59:00" "2020-02-12 23:59:00" "2020-02-12 23:59:00" ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "sampleTime" "METRIC_ID" "GROUP_ID"
 
str(dt.test[is.na(MINVAL), ])
## Classes ‘data.table’ and 'data.frame':  0 obs. of  13 variables:
## ...
                                                          
str(dt.test[is.na(MAXVAL), ])
## Classes ‘data.table’ and 'data.frame':  0 obs. of  13 variables:
## ...

str(dt.test[is.na(AVERAGE), ])
## Classes ‘data.table’ and 'data.frame':  0 obs. of  13 variables:
## ...

str(dt.test[is.na(STANDARD_DEVIATION), ])
## Classes ‘data.table’ and 'data.frame':  19 obs. of  13 variables:
## ...
##  --> hat NA-Werte; die wurden aber bereits so importiert; somit alles i.O.

## Quantile für AVERAGE (Median des Mittelwertes etc.)
library(broom)
dt.average.quantile <- dt[ NUM_INTERVAL >= 57 & NUM_INTERVAL <= 63, glance(summary(AVERAGE)), by=list(METRIC_ID, GROUP_ID, INSTANCE_NUMBER)]
setkeyv(dt.average.quantile, c("METRIC_ID", "GROUP_ID", "INSTANCE_NUMBER"))
str(dt.average.quantile)
## Classes ‘data.table’ and 'data.frame':  316 obs. of  9 variables:
##  $ METRIC_ID      : int  2000 2000 2001 2001 2002 2002 2003 2003 2004 2004 ...
##  $ GROUP_ID       : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ INSTANCE_NUMBER: int  1 2 1 2 1 2 1 2 1 2 ...
##  $ minimum        : num  94.9 98.5 100 100 99.9 ...
##  $ q1             : num  99.8 99.9 100 100 100 ...
##  $ median         : num  100 99.9 100 100 100 ...
##  $ mean           : num  99.8 99.9 100 100 100 ...
##  $ q3             : num  100 100 100 100 100 ...
##  $ maximum        : num  100 100 100 100 100 ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "METRIC_ID" "GROUP_ID" "INSTANCE_NUMBER"
 
dt.quantiled <- merge(dt, dt.average.quantile, by=c("METRIC_ID","GROUP_ID","INSTANCE_NUMBER"), all=F)
setkeyv(dt.quantiled, c("SNAP_ID", "METRIC_ID", "GROUP_ID", "INSTANCE_NUMBER"))
str(dt.quantiled)
## Classes ‘data.table’ and 'data.frame':  223570 obs. of  19 variables:
##  $ METRIC_ID         : int  2000 2000 2001 2001 2002 2002 2003 2003 2004 2004 ...
##  $ GROUP_ID          : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ INSTANCE_NUMBER   : int  1 2 1 2 1 2 1 2 1 2 ...
##  $ SNAP_ID           : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ BEGIN_TIME        : chr  "2020-02-12 23:59:54" "2020-02-13 00:00:18" "2020-02-12 23:59:54" "2020-02-13 00:00:18" ...
##  $ END_TIME          : chr  "2020-02-13 00:59:55" "2020-02-13 01:00:18" "2020-02-13 00:59:55" "2020-02-13 01:00:18" ...
##  $ INTSIZE           : int  359951 359919 359951 359919 359951 359919 359951 359919 359951 359919 ...
##  $ NUM_INTERVAL      : int  60 60 60 60 60 60 60 60 60 60 ...
##  $ MINVAL            : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ AVERAGE           : num  98.3 99.7 100 100 100 ...
##  $ MAXVAL            : num  99.5 100 100 100 100 ...
##  $ STANDARD_DEVIATION: num  1.054559 0.251296 0 0 0.000323 ...
##  $ sampleTime        : POSIXct, format: "2020-02-12 23:59:00" "2020-02-13 00:00:00" "2020-02-12 23:59:00" "2020-02-13 00:00:00" ...
##  $ minimum           : num  94.9 98.5 100 100 99.9 ...
##  $ q1                : num  99.8 99.9 100 100 100 ...
##  $ median            : num  100 99.9 100 100 100 ...
##  $ mean              : num  99.8 99.9 100 100 100 ...
##  $ q3                : num  100 100 100 100 100 ...
##  $ maximum           : num  100 100 100 100 100 ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "SNAP_ID" "METRIC_ID" "GROUP_ID" "INSTANCE_NUMBER"

## Messung anhand von AVERAGE und den Quantilen q1 und q3 kategorisieren als 'L' (tief), 'M' (mittel) oder 'H' (hoch)
dt.quantiled[, category := as.factor('x')]
str(dt.quantiled)
## Classes ‘data.table’ and 'data.frame':  223570 obs. of  20 variables:
##  $ METRIC_ID         : int  2000 2000 2001 2001 2002 2002 2003 2003 2004 2004 ...
##  $ GROUP_ID          : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ INSTANCE_NUMBER   : int  1 2 1 2 1 2 1 2 1 2 ...
##  $ SNAP_ID           : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ BEGIN_TIME        : chr  "2020-02-12 23:59:54" "2020-02-13 00:00:18" "2020-02-12 23:59:54" "2020-02-13 00:00:18" ...
##  $ END_TIME          : chr  "2020-02-13 00:59:55" "2020-02-13 01:00:18" "2020-02-13 00:59:55" "2020-02-13 01:00:18" ...
##  $ INTSIZE           : int  359951 359919 359951 359919 359951 359919 359951 359919 359951 359919 ...
##  $ NUM_INTERVAL      : int  60 60 60 60 60 60 60 60 60 60 ...
##  $ MINVAL            : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ AVERAGE           : num  98.3 99.7 100 100 100 ...
##  $ MAXVAL            : num  99.5 100 100 100 100 ...
##  $ STANDARD_DEVIATION: num  1.054559 0.251296 0 0 0.000323 ...
##  $ sampleTime        : POSIXct, format: "2020-02-12 23:59:00" "2020-02-13 00:00:00" "2020-02-12 23:59:00" "2020-02-13 00:00:00" ...
##  $ minimum           : num  94.9 98.5 100 100 99.9 ...
##  $ q1                : num  99.8 99.9 100 100 100 ...
##  $ median            : num  100 99.9 100 100 100 ...
##  $ mean              : num  99.8 99.9 100 100 100 ...
##  $ q3                : num  100 100 100 100 100 ...
##  $ maximum           : num  100 100 100 100 100 ...
##  $ category          : Factor w/ 1 level "x": 1 1 1 1 1 1 1 1 1 1 ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "SNAP_ID" "METRIC_ID" "GROUP_ID" "INSTANCE_NUMBER"

dt.quantiled[ AVERAGE < q1, category := as.factor('L')]
dt.quantiled[ AVERAGE > q3, category := as.factor('H')]
dt.quantiled[ AVERAGE <= q3 & AVERAGE >= q1, category := as.factor('M')]
str(dt.quantiled)
## Classes ‘data.table’ and 'data.frame':  223570 obs. of  20 variables:
##  $ METRIC_ID         : int  2000 2000 2001 2001 2002 2002 2003 2003 2004 2004 ...
##  $ GROUP_ID          : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ INSTANCE_NUMBER   : int  1 2 1 2 1 2 1 2 1 2 ...
##  $ SNAP_ID           : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ BEGIN_TIME        : chr  "2020-02-12 23:59:54" "2020-02-13 00:00:18" "2020-02-12 23:59:54" "2020-02-13 00:00:18" ...
##  $ END_TIME          : chr  "2020-02-13 00:59:55" "2020-02-13 01:00:18" "2020-02-13 00:59:55" "2020-02-13 01:00:18" ...
##  $ INTSIZE           : int  359951 359919 359951 359919 359951 359919 359951 359919 359951 359919 ...
##  $ NUM_INTERVAL      : int  60 60 60 60 60 60 60 60 60 60 ...
##  $ MINVAL            : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ AVERAGE           : num  98.3 99.7 100 100 100 ...
##  $ MAXVAL            : num  99.5 100 100 100 100 ...
##  $ STANDARD_DEVIATION: num  1.054559 0.251296 0 0 0.000323 ...
##  $ sampleTime        : POSIXct, format: "2020-02-12 23:59:00" "2020-02-13 00:00:00" "2020-02-12 23:59:00" "2020-02-13 00:00:00" ...
##  $ minimum           : num  94.9 98.5 100 100 99.9 ...
##  $ q1                : num  99.8 99.9 100 100 100 ...
##  $ median            : num  100 99.9 100 100 100 ...
##  $ mean              : num  99.8 99.9 100 100 100 ...
##  $ q3                : num  100 100 100 100 100 ...
##  $ maximum           : num  100 100 100 100 100 ...
##  $ category          : Factor w/ 4 levels "x","L","H","M": 2 2 4 4 4 4 2 2 3 3 ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "SNAP_ID" "METRIC_ID" "GROUP_ID" "INSTANCE_NUMBER"

dt.quantiled[ category == as.factor('x'), ]
## Empty data.table (0 rows) of 20 cols: METRIC_ID,GROUP_ID,INSTANCE_NUMBER,SNAP_ID,BEGIN_TIME,END_TIME...
## --> leer


## Metadaten zu den Metriken
dt.metrics.meta <- data.table(daten.metrics)
setkeyv(dt.metrics.meta, c("METRIC_ID", "GROUP_ID"))
str(dt.metrics.meta)
## Classes ‘data.table’ and 'data.frame':  158 obs. of  7 variables:
##  $ METRIC_ID    : int  2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 ...
##  $ METRIC_NAME  : chr  "Buffer Cache Hit Ratio" "Memory Sorts Ratio" "Redo Allocation Hit Ratio" "User Transaction Per Sec" ...
##  $ METRIC_UNIT  : chr  "% (LogRead - PhyRead)/LogRead" "% MemSort/(MemSort + DiskSort)" "% (#Redo - RedoSpaceReq)/#Redo" "Transactions Per Second" ...
##  $ GROUP_ID     : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ GROUP_NAME   : chr  "System Metrics Long Duration" "System Metrics Long Duration" "System Metrics Long Duration" "System Metrics Long Duration" ...
##  $ INTERVAL_SIZE: int  6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 ...
##  $ MAX_INTERVAL : int  60 60 60 60 60 60 60 60 60 60 ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "METRIC_ID" "GROUP_ID"

dt.avg.named <- merge(dt.quantiled, dt.metrics.meta[, list(METRIC_ID, GROUP_ID, METRIC_NAME)], by=c("METRIC_ID", "GROUP_ID") )
setkeyv(dt.avg.named, c("SNAP_ID", "METRIC_ID", "GROUP_ID", "INSTANCE_NUMBER"))
str(dt.avg.named)
## Classes ‘data.table’ and 'data.frame':  223570 obs. of  21 variables:
##  $ METRIC_ID         : int  2000 2000 2001 2001 2002 2002 2003 2003 2004 2004 ...
##  $ GROUP_ID          : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ INSTANCE_NUMBER   : int  1 2 1 2 1 2 1 2 1 2 ...
##  $ SNAP_ID           : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ BEGIN_TIME        : chr  "2020-02-12 23:59:54" "2020-02-13 00:00:18" "2020-02-12 23:59:54" "2020-02-13 00:00:18" ...
##  $ END_TIME          : chr  "2020-02-13 00:59:55" "2020-02-13 01:00:18" "2020-02-13 00:59:55" "2020-02-13 01:00:18" ...
##  $ INTSIZE           : int  359951 359919 359951 359919 359951 359919 359951 359919 359951 359919 ...
##  $ NUM_INTERVAL      : int  60 60 60 60 60 60 60 60 60 60 ...
##  $ MINVAL            : int  0 0 0 0 0 0 0 0 0 0 ...
##  $ AVERAGE           : num  98.3 99.7 100 100 100 ...
##  $ MAXVAL            : num  99.5 100 100 100 100 ...
##  $ STANDARD_DEVIATION: num  1.054559 0.251296 0 0 0.000323 ...
##  $ sampleTime        : POSIXct, format: "2020-02-12 23:59:00" "2020-02-13 00:00:00" "2020-02-12 23:59:00" "2020-02-13 00:00:00" ...
##  $ minimum           : num  94.9 98.5 100 100 99.9 ...
##  $ q1                : num  99.8 99.9 100 100 100 ...
##  $ median            : num  100 99.9 100 100 100 ...
##  $ mean              : num  99.8 99.9 100 100 100 ...
##  $ q3                : num  100 100 100 100 100 ...
##  $ maximum           : num  100 100 100 100 100 ...
##  $ category          : Factor w/ 4 levels "x","L","H","M": 2 2 4 4 4 4 2 2 3 3 ...
##  $ METRIC_NAME       : chr  "Buffer Cache Hit Ratio" "Buffer Cache Hit Ratio" "Memory Sorts Ratio" "Memory Sorts Ratio" ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "SNAP_ID" "METRIC_ID" "GROUP_ID" "INSTANCE_NUMBER"


## Datenstruktur für weitere Analyse erzeugen
dt.avg.category <- dt.avg.named[, list(SNAP_ID, INSTANCE_NUMBER, METRIC_ID, GROUP_ID,
   "metricItem" = paste(METRIC_NAME, ' (', GROUP_ID, ') ', category, sep=""),
   "category" = as.character(category))]
setkeyv(dt.avg.category, c("SNAP_ID", "INSTANCE_NUMBER", "METRIC_ID", "GROUP_ID"))
str(dt.avg.category)
## Classes ‘data.table’ and 'data.frame':  223570 obs. of  6 variables:
##  $ SNAP_ID        : int  39768 39768 39768 39768 39768 39768 39768 39768 39768 39768 ...
##  $ INSTANCE_NUMBER: int  1 1 1 1 1 1 1 1 1 1 ...
##  $ METRIC_ID      : int  2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 ...
##  $ GROUP_ID       : int  2 2 2 2 2 2 2 2 2 2 ...
##  $ metricItem     : chr  "Buffer Cache Hit Ratio (2) L" "Memory Sorts Ratio (2) M" "Redo Allocation Hit Ratio (2) M" "User Transaction Per Sec (2) L" ...
##  $ category       : chr  "L" "M" "M" "L" ...
##  - attr(*, ".internal.selfref")=<externalptr> 
##  - attr(*, "sorted")= chr  "SNAP_ID" "INSTANCE_NUMBER" "METRIC_ID" "GROUP_ID"

setwd(paste('C:/data/CAS-ADS/Git.repos/CAS-Applied-Data-Science/Machine-Learning-Project/project.1/metriken.2020-03-14',
  'analysis/prod.dba_hist_sysmetric_summary.2020-02-12-bis-2020-03-14/R.workspaces', sep='/'))

## Datenstrukturen zur weiteren Auswertung binär sicher
save(dt.avg.category, dt.metrics.meta, file='sysmetrics-summary.category.RData', safe=T)

