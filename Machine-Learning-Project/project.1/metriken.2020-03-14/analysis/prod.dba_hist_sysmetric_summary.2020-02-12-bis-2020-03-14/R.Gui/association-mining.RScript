setwd('C:/data/CAS-ADS/Git.repos/CAS-Applied-Data-Science/Machine-Learning-Project/project.1/metriken.2020-03-14/analysis/prod.dba_hist_sysmetric_summary.2020-02-12-bis-2020-03-14/R.workspaces')

library(data.table)
library(broom)

load('sysmetrics-summary.category.RData')

str(dt.avg.category)
str(dt.metrics.meta)
rm(T)

## Reformat the data for further processingr
dt.hum.1 <- dt.avg.category[ INSTANCE_NUMBER == 1 & category %in% c("H", "M"), list(SNAP_ID, metricItem)]
dt.hum.2 <- dt.avg.category[ INSTANCE_NUMBER == 2 & category %in% c("H", "M"), list(SNAP_ID, metricItem)]
str(dt.hum.1)
str(dt.hum.2)

## Für jede SNAP_ID müssen die metricItem's als Charactervektor angeordnet werden
## Schritt 1: Datatable aufteilen in Liste von Datatables; Aufsplitten nach SNAP_ID
ll.1 <- split(dt.hum.1, by=c("SNAP_ID"), keep.by=F)
class(ll.1)
str(ll.1[[1]])

ll.2 <- split(dt.hum.2, by=c("SNAP_ID"), keep.by=F)
str(ll.2[[1]])

ll.unlist.1 <- lapply(ll.1, unlist)
class(ll.unlist.1)
str(ll.unlist.1[[1]])

ll.asVec.1 <- lapply(ll.unlist.1, as.vector)
class(ll.asVec.1)
str(ll.asVec.1[[1]])

## Dito für DB Instanz 2
ll.unlist.2 <- lapply(ll.2, unlist)
ll.asVec.2 <- lapply(ll.unlist.2, as.vector)
str(ll.asVec.2[[1]])

library(arules)

## Create itemMatrix-Objekt als Dateninput
im.1 <- as(ll.asVec.1, "itemMatrix")
str(im.1)

im.2 <- as(ll.asVec.2, "itemMatrix")
str(im.2)


## Daten betrachten
summary(im.1)
summary(im.2)

itemFrequency(im.1[, 1:5])
itemFrequency(im.2[, 1:5])

itemFrequencyPlot(im.1, topN = 50, col="red")
itemFrequencyPlot(im.2, topN = 50, col="red")

image(sample(im.1, 100))
image(sample(im.2, 100))

rules.1 <- apriori(data = im.1, parameter = list(support=0.1, confidence=0.9, minlen=2))
rules.1

summary(rules.1)

inspect(sort(rules.1, by="lift")[1:10])
